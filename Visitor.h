using namespace std;

class ASTProgram;
class ASTFieldDeclaration;
class ASTIdComma;
class ASTVarIdentifier;
class ASTArrayIdentifier;
class ASTMethodDeclaration;
class ASTArgument;
class ASTBlock;
class ASTVarDeclaration;
class ASTStatement;
class ASTIdCommas;
class ASTBreakStatement;
class ASTExpression;
class ASTBinaryExpression;
class ASTUnaryExpression;
class ASTReturnStatement;
class ASTContinueStatement;
class ASTForStatement;
class ASTIfStatement;
class ASTAssignmentStatement;
class ASTIfElseStatement;
class ASTBlockStatement;
class ASTLocation;
class ASTVarLocation;
class ASTArrayLocation;
class ASTLiteral;
class ASTIntLiteral;
class ASTCharLiteral;
class ASTBoolLiteral;
class ASTAssignOperator;
class ASTExprComma;
class ASTMethodCall;
class ASTNameMethodCall;
class ASTCallout;
class ASTCalloutArgument;
class ASTCalloutArgumentExpr;
class ASTCalloutArgumentString;

class visitor{
  public:
    virtual void visit (ASTProgram *, int) = 0;
    virtual void visit (ASTFieldDeclaration *, int) = 0;
    //virtual void visit (ASTIdComma *, int) = 0;
    virtual void visit (ASTVarIdentifier *, int) = 0;
    virtual void visit (ASTArrayIdentifier *, int) = 0;
    virtual void visit (ASTMethodDeclaration *, int) = 0;
    virtual void visit (ASTArgument *, int) = 0;
    virtual void visit (ASTBlock *, int) = 0;
    virtual void visit (ASTVarDeclaration *, int) = 0;
    virtual void visit (ASTIdCommas *, int) = 0;
    virtual void visit (ASTBreakStatement*, int) = 0;
    virtual void visit (ASTContinueStatement*, int) = 0;
    virtual void visit (ASTBinaryExpression*, int) = 0;
    virtual void visit (ASTVarLocation *, int) = 0;
    virtual void visit (ASTArrayLocation *, int) = 0;
    virtual void visit (ASTUnaryExpression *, int) = 0;
    virtual void visit (ASTIntLiteral *, int) = 0;
    virtual void visit (ASTBoolLiteral *, int) = 0;
    virtual void visit (ASTCharLiteral *, int) = 0;
    virtual void visit (ASTAssignOperator *, int) = 0;
    virtual void visit (ASTBlockStatement *, int) = 0;
    virtual void visit (ASTAssignmentStatement *, int) = 0;
    virtual void visit (ASTReturnStatement *, int) = 0;
    virtual void visit (ASTIfStatement *, int) = 0;
    virtual void visit (ASTIfElseStatement *, int) = 0;
    virtual void visit (ASTNameMethodCall *, int) = 0;
    virtual void visit (ASTCalloutArgumentExpr *, int) = 0;
    virtual void visit (ASTCalloutArgumentString *, int) = 0;
    virtual void visit (ASTCallout *, int) = 0;  
    virtual void visit (ASTForStatement*, int) = 0;
};
